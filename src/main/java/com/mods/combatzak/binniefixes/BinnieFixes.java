package com.mods.combatzak.binniefixes;

import java.io.IOException;
import java.util.Map;

import com.google.common.eventbus.Subscribe;

import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.versioning.ArtifactVersion;
import cpw.mods.fml.common.versioning.VersionParser;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.EventBus;
import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import net.minecraft.launchwrapper.Launch;
import java.util.Arrays;

@IFMLLoadingPlugin.Name("More Binnie Fixes ASM")
@IFMLLoadingPlugin.MCVersion("1.7.10")
@IFMLLoadingPlugin.SortingIndex(2008)
@IFMLLoadingPlugin.TransformerExclusions({ "com.mods.combatzak.binniefixes", "com.mods.combatzak.binniefixes." })
public class BinnieFixes implements IFMLLoadingPlugin {
	/**
	 * Indicates whether or not the runtime is obfuscated
	 */
	public static final boolean obfuscated;
	
	/**
	 * Static block tests for obfuscation and sets flag if necessary
	 */
	static {
		boolean testObfuscation = true;
		try {
			testObfuscation = Launch.classLoader.getClassBytes("net.minecraft.world.World") == null;
		}
		catch (IOException ex) {}
		obfuscated = testObfuscation;
	}
	
	public static class BinnieFixesContainer extends DummyModContainer {
		public static final String MODID = "binniefixes";
		public static final String MOD_NAME = "More Binnie Fixes";
		public static final String MOD_VERSION = "1.0.1";
		
		@Mod.Instance("binniefixes")
		public static BinnieFixesContainer instance;
		
		public BinnieFixesContainer() {
			super(new ModMetadata());

			ModMetadata metadata = super.getMetadata();
			metadata.name = MOD_NAME;
			metadata.modId = MODID;
			metadata.description = "Applies more ASM fixes to Binnie's Mods";
			metadata.version = MOD_VERSION;
			metadata.authorList = Arrays.asList(new String[] { "CombatZAK" });
			metadata.credits = "Thanks to Binnie for all of his mods, the Forestry team, and Chocohead for the idea.";
			metadata.autogenerated = false;
			metadata.parent = "BinnieCore";
			metadata.dependencies = Arrays.asList(new ArtifactVersion[] {VersionParser.parseVersionReference("Forestry"), VersionParser.parseVersionReference("Genetics") });
			instance = this;
		}
		
		@EventHandler
	    public void preInit(FMLPreInitializationEvent event)
	    {
	      if (!Loader.isModLoaded("BinnieCore")) {
	        throw new RuntimeException("Binnie's mods jar must also be present for Binnie Patcher to work.");
	      }
	    }
		
		public boolean registerBus(EventBus bus, LoadController controller) {
			bus.register(this);
			return true;
		}
	}
	
	///IFMLLoadingPlugin Implementation
	
	/**
	 * Gets the transformers that should be run
	 */
	@Override
	public String[] getASMTransformerClass() {
		return new String[] { "com.mods.combatzak.binniefixes.asm.FixGenetics" };
	}
	
	/**
	 * Gets the fully qualified name of the container class for the mod
	 */
	@Override
	public String getModContainerClass() {
		return "com.mods.combatzak.binniefixes.BinnieFixes$BinnieFixesContainer";
	}
	
	/**
	 * Not implemented
	 */
	@Override
	public String getSetupClass() {
		return null;
	}
	
	/**
	 * Not implemented
	 */
	@Override
	public void injectData(Map<String, Object> data) {
		
	}
	
	/**
	 * Not implemented
	 */
	@Override
	public String getAccessTransformerClass() {
		return null;
	}
}
